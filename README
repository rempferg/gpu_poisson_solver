Compile with

    nvcc -l cufft gpu_poisson_solver.cu
    
Output at various stages of the computations can be enabled by defining any 
combination of the precompiler constants

    OUTPUT
    OUTPUT_GF
    OUTPUT_CHARGE
    OUTPUT_CHARGE_FFT
    OUTPUT_CHARGE_FFT_GF
    OUTPUT_POTENTIAL
    
The results can be visualized with gnuplot using

    splot "file.dat" w pm3d


Scaling:

    There is a plot of the calculation times for a large range of grid sizes in
    'scaling.pdf'. The plot shows that the effort delicately depends on the grid
    size. The FFTs are most efficient if the side length can be decomposed into
    prime factors 2, 3, 5 and 7 which gives rise to the odd scaling patterns.
    For example, a run on a 8192^2 grid takes less than 50 ms on a Tesla C2050
    while a run on a 6669^2 grid takes over 420 ms on the same device.
    

Known issues:
- grid has equal size in all directions
- grid is 2D
- some grid sized cause a segfault in the output routines
